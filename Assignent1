{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "8afdbeea-ffd8-449f-b104-489eb6e2d212",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Write all the conventions being followed while declaring a variable."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "553a5485-8ecd-4ee4-9ba6-a2879f74ca2d",
   "metadata": {},
   "outputs": [],
   "source": [
    "#You can use numbers, and any sequence of words in order to declare a variable, however spaces inside the name of the variable are not allowed.\n",
    "#We instead use undercores to declare variables For ex-\n",
    "\n",
    "bau_112  = 2891"
   ]
  },
  {
   "cell_type": "raw",
   "id": "3229c1c6-a6b7-491e-94d1-bcc8494cc717",
   "metadata": {},
   "source": [
    "What will happen if we declare a restricted keyword as a variable?\n",
    "\n",
    "Ans) If we decclare a restricted keyword a a variable, the system will show us a syntax error"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "54b8af11-969b-4afb-9e82-90fbeea89654",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "my string is : Town\n",
      "The variables are:\n",
      "{'__name__': '__main__', '__doc__': 'Automatically created module for IPython interactive environment', '__package__': None, '__loader__': None, '__spec__': None, '__builtin__': <module 'builtins' (built-in)>, '__builtins__': <module 'builtins' (built-in)>, '_ih': ['', '#Write all the conventions being followed while declaring a variable.', '#You can use numbers, and any sequence of words in order to declare a variable, however spaces inside the name of the variable are not allowed.\\n#We instead use undercores to declare variables For ex-\\n\\nbau_112  = 2891', 'String = \"Town\"\\nprint(\\'my string is :\\', String)\\nmyVars = vars()\\nmyVars[String] = \" Berhampore\"\\nprint(\"The variables are:\")\\nprint(myVars)\\nprint(\"{} is {}\".format(String))', 'String = \"Town\"\\nprint(\\'my string is :\\', String)\\nmyVars = vars()\\nmyVars[String] = \" Berhampore\"\\nprint(\"The variables are:\")\\nprint(myVars)\\nprint(\"{} is {}\".format(String,myVars))', 'String = \"Town\"\\nprint(\\'my string is :\\', String)\\nmyVars = vars()\\nmyVars[String] = \" Berhampore\"\\nprint(\"The variables are:\")\\nprint(myVars)\\nprint(\"{} is {}\".format(String,myVars))'], '_oh': {}, '_dh': [PosixPath('/home/jovyan/work')], 'In': ['', '#Write all the conventions being followed while declaring a variable.', '#You can use numbers, and any sequence of words in order to declare a variable, however spaces inside the name of the variable are not allowed.\\n#We instead use undercores to declare variables For ex-\\n\\nbau_112  = 2891', 'String = \"Town\"\\nprint(\\'my string is :\\', String)\\nmyVars = vars()\\nmyVars[String] = \" Berhampore\"\\nprint(\"The variables are:\")\\nprint(myVars)\\nprint(\"{} is {}\".format(String))', 'String = \"Town\"\\nprint(\\'my string is :\\', String)\\nmyVars = vars()\\nmyVars[String] = \" Berhampore\"\\nprint(\"The variables are:\")\\nprint(myVars)\\nprint(\"{} is {}\".format(String,myVars))', 'String = \"Town\"\\nprint(\\'my string is :\\', String)\\nmyVars = vars()\\nmyVars[String] = \" Berhampore\"\\nprint(\"The variables are:\")\\nprint(myVars)\\nprint(\"{} is {}\".format(String,myVars))'], 'Out': {}, 'get_ipython': <bound method InteractiveShell.get_ipython of <ipykernel.zmqshell.ZMQInteractiveShell object at 0x7f81e95a3340>>, 'exit': <IPython.core.autocall.ZMQExitAutocall object at 0x7f81e95a3fd0>, 'quit': <IPython.core.autocall.ZMQExitAutocall object at 0x7f81e95a3fd0>, 'open': <function open at 0x7f81eaa0eb00>, '_': '', '__': '', '___': '', '_i': 'String = \"Town\"\\nprint(\\'my string is :\\', String)\\nmyVars = vars()\\nmyVars[String] = \" Berhampore\"\\nprint(\"The variables are:\")\\nprint(myVars)\\nprint(\"{} is {}\".format(String,myVars))', '_ii': 'String = \"Town\"\\nprint(\\'my string is :\\', String)\\nmyVars = vars()\\nmyVars[String] = \" Berhampore\"\\nprint(\"The variables are:\")\\nprint(myVars)\\nprint(\"{} is {}\".format(String))', '_iii': '#You can use numbers, and any sequence of words in order to declare a variable, however spaces inside the name of the variable are not allowed.\\n#We instead use undercores to declare variables For ex-\\n\\nbau_112  = 2891', '_i1': '#Write all the conventions being followed while declaring a variable.', '_i2': '#You can use numbers, and any sequence of words in order to declare a variable, however spaces inside the name of the variable are not allowed.\\n#We instead use undercores to declare variables For ex-\\n\\nbau_112  = 2891', 'bau_112': 2891, '_i3': 'String = \"Town\"\\nprint(\\'my string is :\\', String)\\nmyVars = vars()\\nmyVars[String] = \" Berhampore\"\\nprint(\"The variables are:\")\\nprint(myVars)\\nprint(\"{} is {}\".format(String))', 'String': 'Town', 'myVars': {...}, 'Town': ' Berhampore', '_i4': 'String = \"Town\"\\nprint(\\'my string is :\\', String)\\nmyVars = vars()\\nmyVars[String] = \" Berhampore\"\\nprint(\"The variables are:\")\\nprint(myVars)\\nprint(\"{} is {}\".format(String,myVars))', '_i5': 'String = \"Town\"\\nprint(\\'my string is :\\', String)\\nmyVars = vars()\\nmyVars[String] = \" Berhampore\"\\nprint(\"The variables are:\")\\nprint(myVars)\\nprint(\"{} is {}\".format(String,myVars))'}\n",
      "Town is {'__name__': '__main__', '__doc__': 'Automatically created module for IPython interactive environment', '__package__': None, '__loader__': None, '__spec__': None, '__builtin__': <module 'builtins' (built-in)>, '__builtins__': <module 'builtins' (built-in)>, '_ih': ['', '#Write all the conventions being followed while declaring a variable.', '#You can use numbers, and any sequence of words in order to declare a variable, however spaces inside the name of the variable are not allowed.\\n#We instead use undercores to declare variables For ex-\\n\\nbau_112  = 2891', 'String = \"Town\"\\nprint(\\'my string is :\\', String)\\nmyVars = vars()\\nmyVars[String] = \" Berhampore\"\\nprint(\"The variables are:\")\\nprint(myVars)\\nprint(\"{} is {}\".format(String))', 'String = \"Town\"\\nprint(\\'my string is :\\', String)\\nmyVars = vars()\\nmyVars[String] = \" Berhampore\"\\nprint(\"The variables are:\")\\nprint(myVars)\\nprint(\"{} is {}\".format(String,myVars))', 'String = \"Town\"\\nprint(\\'my string is :\\', String)\\nmyVars = vars()\\nmyVars[String] = \" Berhampore\"\\nprint(\"The variables are:\")\\nprint(myVars)\\nprint(\"{} is {}\".format(String,myVars))'], '_oh': {}, '_dh': [PosixPath('/home/jovyan/work')], 'In': ['', '#Write all the conventions being followed while declaring a variable.', '#You can use numbers, and any sequence of words in order to declare a variable, however spaces inside the name of the variable are not allowed.\\n#We instead use undercores to declare variables For ex-\\n\\nbau_112  = 2891', 'String = \"Town\"\\nprint(\\'my string is :\\', String)\\nmyVars = vars()\\nmyVars[String] = \" Berhampore\"\\nprint(\"The variables are:\")\\nprint(myVars)\\nprint(\"{} is {}\".format(String))', 'String = \"Town\"\\nprint(\\'my string is :\\', String)\\nmyVars = vars()\\nmyVars[String] = \" Berhampore\"\\nprint(\"The variables are:\")\\nprint(myVars)\\nprint(\"{} is {}\".format(String,myVars))', 'String = \"Town\"\\nprint(\\'my string is :\\', String)\\nmyVars = vars()\\nmyVars[String] = \" Berhampore\"\\nprint(\"The variables are:\")\\nprint(myVars)\\nprint(\"{} is {}\".format(String,myVars))'], 'Out': {}, 'get_ipython': <bound method InteractiveShell.get_ipython of <ipykernel.zmqshell.ZMQInteractiveShell object at 0x7f81e95a3340>>, 'exit': <IPython.core.autocall.ZMQExitAutocall object at 0x7f81e95a3fd0>, 'quit': <IPython.core.autocall.ZMQExitAutocall object at 0x7f81e95a3fd0>, 'open': <function open at 0x7f81eaa0eb00>, '_': '', '__': '', '___': '', '_i': 'String = \"Town\"\\nprint(\\'my string is :\\', String)\\nmyVars = vars()\\nmyVars[String] = \" Berhampore\"\\nprint(\"The variables are:\")\\nprint(myVars)\\nprint(\"{} is {}\".format(String,myVars))', '_ii': 'String = \"Town\"\\nprint(\\'my string is :\\', String)\\nmyVars = vars()\\nmyVars[String] = \" Berhampore\"\\nprint(\"The variables are:\")\\nprint(myVars)\\nprint(\"{} is {}\".format(String))', '_iii': '#You can use numbers, and any sequence of words in order to declare a variable, however spaces inside the name of the variable are not allowed.\\n#We instead use undercores to declare variables For ex-\\n\\nbau_112  = 2891', '_i1': '#Write all the conventions being followed while declaring a variable.', '_i2': '#You can use numbers, and any sequence of words in order to declare a variable, however spaces inside the name of the variable are not allowed.\\n#We instead use undercores to declare variables For ex-\\n\\nbau_112  = 2891', 'bau_112': 2891, '_i3': 'String = \"Town\"\\nprint(\\'my string is :\\', String)\\nmyVars = vars()\\nmyVars[String] = \" Berhampore\"\\nprint(\"The variables are:\")\\nprint(myVars)\\nprint(\"{} is {}\".format(String))', 'String': 'Town', 'myVars': {...}, 'Town': ' Berhampore', '_i4': 'String = \"Town\"\\nprint(\\'my string is :\\', String)\\nmyVars = vars()\\nmyVars[String] = \" Berhampore\"\\nprint(\"The variables are:\")\\nprint(myVars)\\nprint(\"{} is {}\".format(String,myVars))', '_i5': 'String = \"Town\"\\nprint(\\'my string is :\\', String)\\nmyVars = vars()\\nmyVars[String] = \" Berhampore\"\\nprint(\"The variables are:\")\\nprint(myVars)\\nprint(\"{} is {}\".format(String,myVars))'}\n"
     ]
    }
   ],
   "source": [
    "#Can we actually declare a string as a variable name?\n",
    "\n",
    "String = \"Town\"\n",
    "print('my string is :', String)\n",
    "myVars = vars()\n",
    "myVars[String] = \" Berhampore\"\n",
    "print(\"The variables are:\")\n",
    "print(myVars)\n",
    "print(\"{} is {}\".format(String,myVars))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "e48416d4-9b72-46f9-a2dc-404166e257a2",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Is it possible for us to declare “_” as a variable? If so, then write an example of it.\n",
    "\n",
    "_ = 3876"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "65de767c-5ab8-4efb-9631-85afb6ba7eb5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3876"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "5cbd7616-e567-4120-9437-11fcc036d2b2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'int'>\n",
      "<class 'str'>\n"
     ]
    }
   ],
   "source": [
    "#Using an example, explain how the variables in python are dynamic in nature.\n",
    "#variables in python are dynamic in nature since the language can identify the type of the variable without even requiring us to declare it beforehand\n",
    "\n",
    "a=10\n",
    "print(type(a))\n",
    "\n",
    "a= \"sudhir\"\n",
    "\n",
    "print(type(a))\n",
    "\n",
    "#here we can see that I have declared a variable named a which in this particular instance can hold both a integer and a string because python dynamically realises the \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c4f0352b-a6c8-4565-9727-500492653ef2",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
